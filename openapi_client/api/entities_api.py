"""
    FIWARE-NGSI v2 Specification

    TODO: Add a description  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.create_entity_request import CreateEntityRequest
from openapi_client.model.list_entities_response import ListEntitiesResponse
from openapi_client.model.replace_all_entity_attributes_request import ReplaceAllEntityAttributesRequest
from openapi_client.model.retrieve_entity_attributes_response import RetrieveEntityAttributesResponse
from openapi_client.model.retrieve_entity_response import RetrieveEntityResponse
from openapi_client.model.update_existing_entity_attributes_request import UpdateExistingEntityAttributesRequest
from openapi_client.model.update_or_append_entity_attributes_request import UpdateOrAppendEntityAttributesRequest


class EntitiesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_entity_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v2/entities',
                'operation_id': 'create_entity',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'content_type',
                    'body',
                    'options',
                ],
                'required': [
                    'content_type',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('options',): {

                        "KEYVALUES": "keyValues",
                        "UPSERT": "upsert"
                    },
                },
                'openapi_types': {
                    'content_type':
                        (str,),
                    'body':
                        (CreateEntityRequest,),
                    'options':
                        (str,),
                },
                'attribute_map': {
                    'content_type': 'Content-Type',
                    'options': 'options',
                },
                'location_map': {
                    'content_type': 'header',
                    'body': 'body',
                    'options': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.list_entities_endpoint = _Endpoint(
            settings={
                'response_type': ([ListEntitiesResponse],),
                'auth': [],
                'endpoint_path': '/v2/entities',
                'operation_id': 'list_entities',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'type',
                    'id_pattern',
                    'type_pattern',
                    'q',
                    'mq',
                    'georel',
                    'geometry',
                    'coords',
                    'limit',
                    'offset',
                    'attrs',
                    'metadata',
                    'order_by',
                    'options',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                    'limit',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('limit',): {

                    },
                    ('offset',): {

                    },
                },
                'allowed_values': {
                    ('options',): {

                        "COUNT": "count",
                        "KEYVALUES": "keyValues",
                        "VALUES": "values",
                        "UNIQUE": "unique"
                    },
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'type':
                        (str,),
                    'id_pattern':
                        (str,),
                    'type_pattern':
                        (str,),
                    'q':
                        (str,),
                    'mq':
                        (str,),
                    'georel':
                        (str,),
                    'geometry':
                        (str,),
                    'coords':
                        (str,),
                    'limit':
                        (float,),
                    'offset':
                        (float,),
                    'attrs':
                        (str,),
                    'metadata':
                        (str,),
                    'order_by':
                        (str,),
                    'options':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'type': 'type',
                    'id_pattern': 'idPattern',
                    'type_pattern': 'typePattern',
                    'q': 'q',
                    'mq': 'mq',
                    'georel': 'georel',
                    'geometry': 'geometry',
                    'coords': 'coords',
                    'limit': 'limit',
                    'offset': 'offset',
                    'attrs': 'attrs',
                    'metadata': 'metadata',
                    'order_by': 'orderBy',
                    'options': 'options',
                },
                'location_map': {
                    'id': 'query',
                    'type': 'query',
                    'id_pattern': 'query',
                    'type_pattern': 'query',
                    'q': 'query',
                    'mq': 'query',
                    'georel': 'query',
                    'geometry': 'query',
                    'coords': 'query',
                    'limit': 'query',
                    'offset': 'query',
                    'attrs': 'query',
                    'metadata': 'query',
                    'order_by': 'query',
                    'options': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.remove_entity_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v2/entities/{entityId}',
                'operation_id': 'remove_entity',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'type',
                ],
                'required': [
                    'entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'type': 'type',
                },
                'location_map': {
                    'entity_id': 'path',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_all_entity_attributes_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v2/entities/{entityId}/attrs',
                'operation_id': 'replace_all_entity_attributes',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'content_type',
                    'body',
                    'type',
                    'options',
                ],
                'required': [
                    'entity_id',
                    'content_type',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('options',): {

                        "KEYVALUES": "keyValues"
                    },
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'content_type':
                        (str,),
                    'body':
                        (ReplaceAllEntityAttributesRequest,),
                    'type':
                        (str,),
                    'options':
                        (str,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'content_type': 'Content-Type',
                    'type': 'type',
                    'options': 'options',
                },
                'location_map': {
                    'entity_id': 'path',
                    'content_type': 'header',
                    'body': 'body',
                    'type': 'query',
                    'options': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.retrieve_entity_endpoint = _Endpoint(
            settings={
                'response_type': (RetrieveEntityResponse,),
                'auth': [],
                'endpoint_path': '/v2/entities/{entityId}',
                'operation_id': 'retrieve_entity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'type',
                    'attrs',
                    'metadata',
                    'options',
                ],
                'required': [
                    'entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('options',): {

                        "KEYVALUES": "keyValues",
                        "VALUES": "values",
                        "UNIQUE": "unique"
                    },
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'type':
                        (str,),
                    'attrs':
                        (str,),
                    'metadata':
                        (str,),
                    'options':
                        (str,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'type': 'type',
                    'attrs': 'attrs',
                    'metadata': 'metadata',
                    'options': 'options',
                },
                'location_map': {
                    'entity_id': 'path',
                    'type': 'query',
                    'attrs': 'query',
                    'metadata': 'query',
                    'options': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.retrieve_entity_attributes_endpoint = _Endpoint(
            settings={
                'response_type': (RetrieveEntityAttributesResponse,),
                'auth': [],
                'endpoint_path': '/v2/entities/{entityId}/attrs',
                'operation_id': 'retrieve_entity_attributes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'type',
                    'attrs',
                    'metadata',
                    'options',
                ],
                'required': [
                    'entity_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('options',): {

                        "KEYVALUES": "keyValues",
                        "VALUES": "values",
                        "UNIQUE": "unique"
                    },
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'type':
                        (str,),
                    'attrs':
                        (str,),
                    'metadata':
                        (str,),
                    'options':
                        (str,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'type': 'type',
                    'attrs': 'attrs',
                    'metadata': 'metadata',
                    'options': 'options',
                },
                'location_map': {
                    'entity_id': 'path',
                    'type': 'query',
                    'attrs': 'query',
                    'metadata': 'query',
                    'options': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_existing_entity_attributes_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v2/entities/{entityId}/attrs',
                'operation_id': 'update_existing_entity_attributes',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'content_type',
                    'body',
                    'type',
                    'options',
                ],
                'required': [
                    'entity_id',
                    'content_type',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('options',): {

                        "KEYVALUES": "keyValues"
                    },
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'content_type':
                        (str,),
                    'body':
                        (UpdateExistingEntityAttributesRequest,),
                    'type':
                        (str,),
                    'options':
                        (str,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'content_type': 'Content-Type',
                    'type': 'type',
                    'options': 'options',
                },
                'location_map': {
                    'entity_id': 'path',
                    'content_type': 'header',
                    'body': 'body',
                    'type': 'query',
                    'options': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.update_or_append_entity_attributes_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/v2/entities/{entityId}/attrs',
                'operation_id': 'update_or_append_entity_attributes',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_id',
                    'content_type',
                    'body',
                    'type',
                    'options',
                ],
                'required': [
                    'entity_id',
                    'content_type',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                    'options',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('options',): {

                        "APPEND": "append",
                        "KEYVALUES": "keyValues"
                    },
                },
                'openapi_types': {
                    'entity_id':
                        (str,),
                    'content_type':
                        (str,),
                    'body':
                        (UpdateOrAppendEntityAttributesRequest,),
                    'type':
                        (str,),
                    'options':
                        (str,),
                },
                'attribute_map': {
                    'entity_id': 'entityId',
                    'content_type': 'Content-Type',
                    'type': 'type',
                    'options': 'options',
                },
                'location_map': {
                    'entity_id': 'path',
                    'content_type': 'header',
                    'body': 'body',
                    'type': 'query',
                    'options': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def create_entity(
        self,
        content_type,
        body,
        **kwargs
    ):
        """Create Entity  # noqa: E501

        The payload is an object representing the entity to be created. The object follows the JSON entity representation format (described in a \"JSON Entity Representation\" section). Response: * Successful operation uses 201 Created (if upsert option is not used) or 204 No Content (if   upsert option is used). Response includes a `Location` header with the URL of the   created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for   more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_entity(content_type, body, async_req=True)
        >>> result = thread.get()

        Args:
            content_type (str):
            body (CreateEntityRequest):

        Keyword Args:
            options (str): Options dictionary. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['content_type'] = \
            content_type
        kwargs['body'] = \
            body
        return self.create_entity_endpoint.call_with_http_info(**kwargs)

    def list_entities(
        self,
        **kwargs
    ):
        """List Entities  # noqa: E501

        Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query (see [Simple Query Language](#simple_query_language) and  [Geographical Queries](#geographical_queries)). A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. `idPattern` with `id` and `typePattern` with `type`. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity representation format (described in \"JSON Entity Representation\" section). Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for   more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_entities(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            id (str): A comma-separated list of elements. Retrieve entities whose ID matches one of the elements in the list. Incompatible with `idPattern`.. [optional]
            type (str): comma-separated list of elements. Retrieve entities whose type matches one of the elements in the list. Incompatible with `typePattern`.. [optional]
            id_pattern (str): A correctly formated regular expression. Retrieve entities whose ID matches the regular expression. Incompatible with `id`.. [optional]
            type_pattern (str): A correctly formated regular expression. Retrieve entities whose type matches the regular expression. Incompatible with `type`.. [optional]
            q (str): A query expression, composed of a list of statements separated by `;`, i.e., q=statement1;statement2;statement3. See [Simple Query Language specification](#simple_query_language).. [optional]
            mq (str): A query expression for attribute metadata, composed of a list of statements separated by `;`, i.e., mq=statement1;statement2;statement3. See [Simple Query Language specification](#simple_query_language).. [optional]
            georel (str): Spatial relationship between matching entities and a reference shape. See [Geographical Queries](#geographical_queries).. [optional]
            geometry (str): Geografical area to which the query is restricted. See [Geographical Queries](#geographical_queries).. [optional]
            coords (str): List of latitude-longitude pairs of coordinates separated by ';'. See [Geographical Queries](#geographical_queries).. [optional]
            limit (float): Limits the number of entities to be retrieved. [optional]
            offset (float): Establishes the offset from where entities are retrieved. [optional]
            attrs (str): Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order. See \"Filtering out attributes and metadata\" section for more detail.. [optional]
            metadata (str): A list of metadata names to include in the response. See \"Filtering out attributes and metadata\" section for more detail.. [optional]
            order_by (str): Criteria for ordering results. See \"Ordering Results\" section for details.. [optional]
            options (str): Options dictionary. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [ListEntitiesResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.list_entities_endpoint.call_with_http_info(**kwargs)

    def remove_entity(
        self,
        entity_id,
        **kwargs
    ):
        """Remove Entity  # noqa: E501

        Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for   more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.remove_entity(entity_id, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Id of the entity to be deleted

        Keyword Args:
            type (str): Entity type, to avoid ambiguity in case there are several entities with the same entity id.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entity_id'] = \
            entity_id
        return self.remove_entity_endpoint.call_with_http_info(**kwargs)

    def replace_all_entity_attributes(
        self,
        entity_id,
        content_type,
        body,
        **kwargs
    ):
        """Replace all entity attributes  # noqa: E501

        The request payload is an object representing the new entity attributes. The object follows the JSON entity representation format (described in a \"JSON Entity Representation\" above), except that `id` and `type` are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for   more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_all_entity_attributes(entity_id, content_type, body, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Id of the entity in question.
            content_type (str):
            body (ReplaceAllEntityAttributesRequest):

        Keyword Args:
            type (str): Entity type, to avoid ambiguity in case there are several entities with the same entity id.. [optional]
            options (str): Operations options. [optional] if omitted the server will use the default value of "keyValues"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entity_id'] = \
            entity_id
        kwargs['content_type'] = \
            content_type
        kwargs['body'] = \
            body
        return self.replace_all_entity_attributes_endpoint.call_with_http_info(**kwargs)

    def retrieve_entity(
        self,
        entity_id,
        **kwargs
    ):
        """Retrieve Entity  # noqa: E501

        The response is an object representing the entity identified by the ID. The object follows the JSON entity representation format (described in \"JSON Entity Representation\" section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_entity(entity_id, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Id of the entity to be retrieved

        Keyword Args:
            type (str): Entity type, to avoid ambiguity in case there are several entities with the same entity id.. [optional]
            attrs (str): Comma-separated list of attribute names whose data must be included in the response. The attributes are retrieved in the order specified by this parameter. See \"Filtering out attributes and metadata\" section for more detail. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response.. [optional]
            metadata (str): A list of metadata names to include in the response. See \"Filtering out attributes and metadata\" section for more detail.. [optional]
            options (str): Options dictionary. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RetrieveEntityResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entity_id'] = \
            entity_id
        return self.retrieve_entity_endpoint.call_with_http_info(**kwargs)

    def retrieve_entity_attributes(
        self,
        entity_id,
        **kwargs
    ):
        """Retrieve Entity Attributes  # noqa: E501

        This request is similar to retreiving the whole entity, however this one omits the `id` and `type` fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for   more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.retrieve_entity_attributes(entity_id, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Id of the entity to be retrieved

        Keyword Args:
            type (str): Entity type, to avoid ambiguity in case there are several entities with the same entity id.. [optional]
            attrs (str): Comma-separated list of attribute names whose data are to be included in the response. The attributes are retrieved in the order specified by this parameter. If this parameter is not included, the attributes are retrieved in arbitrary order, and all the attributes of the entity are included in the response. See \"Filtering out attributes and metadata\" section for more detail.. [optional]
            metadata (str): A list of metadata names to include in the response. See \"Filtering out attributes and metadata\" section for more detail.. [optional]
            options (str): Options dictionary. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            RetrieveEntityAttributesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entity_id'] = \
            entity_id
        return self.retrieve_entity_attributes_endpoint.call_with_http_info(**kwargs)

    def update_existing_entity_attributes(
        self,
        entity_id,
        content_type,
        body,
        **kwargs
    ):
        """Update Existing Entity Attributes  # noqa: E501

        The request payload is an object representing the attributes to update. The object follows the JSON entity representation format (described in \"JSON Entity Representation\" section), except that `id` and `type` are not allowed. The entity attributes are updated with the ones in the payload. In addition to that, if one or more attributes in the payload doesn't exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for   more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_existing_entity_attributes(entity_id, content_type, body, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Id of the entity to be updated
            content_type (str):
            body (UpdateExistingEntityAttributesRequest):

        Keyword Args:
            type (str): Entity type, to avoid ambiguity in case there are several entities with the same entity id.. [optional]
            options (str): Operations options. [optional] if omitted the server will use the default value of "keyValues"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entity_id'] = \
            entity_id
        kwargs['content_type'] = \
            content_type
        kwargs['body'] = \
            body
        return self.update_existing_entity_attributes_endpoint.call_with_http_info(**kwargs)

    def update_or_append_entity_attributes(
        self,
        entity_id,
        content_type,
        body,
        **kwargs
    ):
        """Update or Append Entity Attributes  # noqa: E501

        The request payload is an object representing the attributes to append or update. The object follows the JSON entity representation format (described in \"JSON Entity Representation\" section), except that `id` and `type` are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the `append` operation option is used or not. * If `append` is not used: the entity attributes are updated (if they previously exist) or appended   (if they don't previously exist) with the ones in the payload. * If `append` is used (i.e. strict append semantics): all the attributes in the payload not   previously existing in the entity are appended. In addition to that, in case some of the   attributes in the payload already exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \"Error Responses\" for   more details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_or_append_entity_attributes(entity_id, content_type, body, async_req=True)
        >>> result = thread.get()

        Args:
            entity_id (str): Entity id to be updated
            content_type (str):
            body (UpdateOrAppendEntityAttributesRequest):

        Keyword Args:
            type (str): Entity type, to avoid ambiguity in case there are several entities with the same entity id.. [optional]
            options (str): Operations options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['entity_id'] = \
            entity_id
        kwargs['content_type'] = \
            content_type
        kwargs['body'] = \
            body
        return self.update_or_append_entity_attributes_endpoint.call_with_http_info(**kwargs)

